name: Pre-Release

on:
  workflow_dispatch:
    inputs:
      branch:
        type: string
        description: "Branch to pre release"
        required: true
      release_level:
        type: choice
        description: "Pre Release level"
        required: true
        options:
          - major
          - minor
          - patch        
env:
  REGISTRY: ghcr.io
  DOCKER_HUB_USER: owolabialiu
  HELM_TEMPLATE: template.yaml
  GPT_CHART_DIR: './.github/workflows/charts/gpt-search'
  AGENT_CHART_DIR: './.github/workflows/charts/agent-flows'
  CHART_OVERWRITE: 'false'

jobs:
  check-versions:
    runs-on: ubuntu-latest
    outputs:
      OCASSIO_APP_TAG: ${{ steps.releaseVersions.outputs.OCASSIO_APP_TAG }}
      OCASSIO_CHART_TAG: ${{ steps.releaseVersions.outputs.OCASSIO_CHART_TAG }}
      ASK_OCASSIO_APP_TAG: ${{ steps.releaseVersions.outputs.ASK_OCASSIO_APP_TAG }}
      ASK_OCASSIO_CHART_TAG: ${{ steps.releaseVersions.outputs.ASK_OCASSIO_CHART_TAG }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-tags: true
          ref: ${{ inputs.branch }}

      - name: Get Release Versions
        id: releaseVersions
        run: |
          ask_occasio_version=$(yq '.appVersion' ./.github/workflows/charts/ask-occasio/Chart.yaml)
          occasio_version=$(yq '.appVersion' ./.github/workflows/charts/occasio/Chart.yaml)
          occasio_chart_version=$(yq '.version' ./.github/workflows/charts/occasio/Chart.yaml)
          ask_occasio_chart_version=$(yq '.version' ./.github/workflows/charts/ask-occasio/Chart.yaml)

          echo "ASK_OCASSIO_APP_TAG=$ask_occasio_version" >> $GITHUB_OUTPUT
          echo "OCASSIO_APP_TAG=$occasio_version" >> $GITHUB_OUTPUT
          echo "OCASSIO_CHART_TAG=$occasio_chart_version" >> $GITHUB_OUTPUT
          echo "ASK_OCASSIO_CHART_TAG=$ask_occasio_chart_version" >> $GITHUB_OUTPUT

      - name: Validate Pre-Release Version Formats
        run: |
          # Validate chart versions (should end with -something)
          if [[ ! "${{ steps.releaseVersions.outputs.OCASSIO_CHART_TAG }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+-[a-zA-Z0-9]+$ ]]; then
            echo "Error: occasio chart version must be in format x.x.x-* (got ${{ steps.releaseVersions.outputs.OCASSIO_CHART_TAG }})"
            exit 1
          fi

          if [[ ! "${{ steps.releaseVersions.outputs.ASK_OCASSIO_CHART_TAG }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+-[a-zA-Z0-9]+$ ]]; then
            echo "Error: ask-occasio chart version must be in format x.x.x-* (got ${{ steps.releaseVersions.outputs.ASK_OCASSIO_CHART_TAG }})"
            exit 1
          fi

          # Validate app versions (should start with pr-)
          if [[ ! "${{ steps.releaseVersions.outputs.OCASSIO_APP_TAG }}" =~ ^pr-.*$ ]]; then
            echo "Error: occasio app version must start with 'pr-' (got ${{ steps.releaseVersions.outputs.OCASSIO_APP_TAG }})"
            exit 1
          fi

          if [[ ! "${{ steps.releaseVersions.outputs.ASK_OCASSIO_APP_TAG }}" =~ ^pr-.*$ ]]; then
            echo "Error: ask-occasio app version must start with 'pr-' (got ${{ steps.releaseVersions.outputs.ASK_OCASSIO_APP_TAG }})"
            exit 1
          fi

          echo "All version formats validated successfully"

      - name: Ask occasio App Image Version Exists
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          response=$(curl -s -H "Authorization: Bearer $(echo -n $GH_TOKEN | base64)" \
            "https://ghcr.io/v2/owolabi16/charts/manifests/ask-occasio:${{ steps.releaseVersions.outputs.ASK_OCASSIO_APP_TAG }}")
          echo "Response: $response"
          if echo "$response" | jq -e '.errors[].code == "MANIFEST_UNKNOWN"' >/dev/null 2>&1; then
            echo "Error: Image manifest not found for tag ask-occasio:${{ steps.releaseVersions.outputs.ASK_OCASSIO_APP_TAG }}"
            exit 1
          else
            echo "Ask occasio Image manifest found for tag ask-occasio:${{ steps.releaseVersions.outputs.ASK_OCASSIO_APP_TAG }} - proceeding"
          fi

      - name: occasio App Image Version Exists
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          response=$(curl -s -H "Authorization: Bearer $(echo -n $GH_TOKEN | base64)" \
            "https://ghcr.io/v2/owolabi16/charts/manifests/occasio:${{ steps.releaseVersions.outputs.OCASSIO_APP_TAG }}")
          echo "Response: $response"
          if echo "$response" | jq -e '.errors[].code == "MANIFEST_UNKNOWN"' >/dev/null 2>&1; then
            echo "Error: Image manifest not found for tag occasio:${{ steps.releaseVersions.outputs.OCASSIO_APP_TAG }}"
            exit 1
          else
            echo "occasio Image manifest found for tag occasio:${{ steps.releaseVersions.outputs.OCASSIO_APP_TAG }} - proceeding"
          fi

      - name: Setup
        run: echo "./tooling/github/setup is missing.."

      - name: Build and Compress Files
        run: echo " building and comprressing files..."               


  build-occasio-apps-images:
    runs-on: ubuntu-latest
    needs: 'check-versions'
    secrets: inherit
    with:
      ## All should match the occasio app image version
      occasio_tag: ${{ needs.check-versions.outputs.OCASSIO_APP_TAG }}
      release_version: ${{ needs.check-versions.outputs.OCASSIO_APP_TAG }}
      ask_occasio_tag: ${{ needs.check-versions.outputs.OCASSIO_APP_TAG }}
    outputs:
      docker-tag: ${{ steps.meta.outputs.version }}
      docker-repo: ${{ steps.docker-repo.outputs.DOCKER_REPOSITORY }}
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      
      - name: Set Docker Repository Variable
        run: echo "DOCKER_REPOSITORY=${{ env.DOCKER_HUB_USER }}/$( echo ${{ github.repository }} | awk -F '/' '{print $2}' | awk '{print tolower($0)}' )" >> $GITHUB_ENV
      
      - name: Set Docker Repository Output
        id: docker-repo
        run: echo "DOCKER_REPOSITORY=${{ env.DOCKER_HUB_USER }}/$( echo ${{ github.repository }} | awk -F '/' '{print $2}' | awk '{print tolower($0)}' )" >> $GITHUB_OUTPUT
      
      - name: Set Repository Owner
        run: echo "REPO_OWNER=$( echo ${{ github.repository_owner }} | awk '{print tolower($0)}' )" >> $GITHUB_ENV
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PAT_TOKEN }}   
      
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ inputs.custom-image-name != '' && format('{0}/{1}', env.DOCKER_HUB_USER, inputs.custom-image-name) || env.DOCKER_REPOSITORY }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr,suffix=${{ inputs.build-target != '' && format('-{0}', inputs.build-target) || ''}}
            type=semver,pattern={{version}},suffix=${{ inputs.build-target != '' && format('-{0}', inputs.build-target) || ''}}
            type=semver,pattern={{major}}.{{minor}},suffix=${{ inputs.build-target != '' && format('-{0}', inputs.build-target) || ''}}
            type=semver,pattern={{major}},suffix=${{ inputs.build-target != '' && format('-{0}', inputs.build-target) || ''}}
            type=sha
            type=raw,value=${{inputs.build-target}}
           
      - name: Build and push
        id: build
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          build-args: ${{ inputs.docker-build-args }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: ${{ inputs.dockerfile-path }}
          platforms: ${{ inputs.docker-arch }}
          pull: true
          no-cache: false
          cache-from: type=registry,ref=ghcr.io/${{ env.REPO_OWNER }}/cache:buildcache
          cache-to: type=registry,ref=ghcr.io/${{ env.REPO_OWNER }}/cache:buildcache,mode=max
          target: ${{ inputs.build-target }}


  build-static-files-create-github-release:
    name: Build Static Files and Create GitHub Release
    runs-on: ubuntu-latest
    needs: [check-versions]
    permissions:
      contents: write
      packages: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN }}
          fetch-tags: true
          ref: ${{ inputs.branch }}

      - name: Setup
        run: echo "./tooling/github/setup is missing.."

      - name: Build and Compress Files
        run: echo " building and comprressing files..."  

      - uses: ncipollo/release-action@v1
        name: Create Release
        with:
          artifacts: "static.tar.gz"
          makeLatest: true
          allowUpdates: true
          token: ${{ secrets.PAT_TOKEN }}
          generateReleaseNotes: true
          skipIfReleaseExists: false
          prerelease: true
          tag: ${{ needs.check-versions.outputs.OCASSIO_APP_TAG }} # see - https://github.com/occasio-Technology-Solutions/occasio-apps/blob/930cd9476e2578352782c625df47b12d363e4049/charts/occasio/templates/deployment.yaml#L42

  # build-occasio-apps-charts:
  #   uses: ./.github/workflows/build-charts.yaml
  #   needs: check-versions
  #   secrets: inherit
  #   with:
  #     ask_occasio_tag: ${{ needs.check-versions.outputs.chart-image-tag-version }}
  #     occasio_tag: ${{ needs.check-versions.outputs.chart-image-tag-version }}
  #     chart_overwrite: true          

  build-occasio-apps-charts:
    runs-on: ubuntu-latest
    needs: 'check-versions'
    outputs:
      docker-tag: ${{ steps.meta.outputs.version }}
      docker-repo: ${{ steps.docker-repo.outputs.DOCKER_REPOSITORY }}
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      
      - name: Set Docker Repository Variable
        run: echo "DOCKER_REPOSITORY=${{ env.DOCKER_HUB_USER }}/$( echo ${{ github.repository }} | awk -F '/' '{print $2}' | awk '{print tolower($0)}' )" >> $GITHUB_ENV
      
      - name: Set Docker Repository Output
        id: docker-repo
        run: echo "DOCKER_REPOSITORY=${{ env.DOCKER_HUB_USER }}/$( echo ${{ github.repository }} | awk -F '/' '{print $2}' | awk '{print tolower($0)}' )" >> $GITHUB_OUTPUT
      
      - name: Set Repository Owner
        run: echo "REPO_OWNER=$( echo ${{ github.repository_owner }} | awk '{print tolower($0)}' )" >> $GITHUB_ENV
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PAT_TOKEN }}   
      
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ inputs.custom-image-name != '' && format('{0}/{1}', env.DOCKER_HUB_USER, inputs.custom-image-name) || env.DOCKER_REPOSITORY }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr,suffix=${{ inputs.build-target != '' && format('-{0}', inputs.build-target) || ''}}
            type=semver,pattern={{version}},suffix=${{ inputs.build-target != '' && format('-{0}', inputs.build-target) || ''}}
            type=semver,pattern={{major}}.{{minor}},suffix=${{ inputs.build-target != '' && format('-{0}', inputs.build-target) || ''}}
            type=semver,pattern={{major}},suffix=${{ inputs.build-target != '' && format('-{0}', inputs.build-target) || ''}}
            type=sha
            type=raw,value=${{inputs.build-target}}
           
      - name: Build and push
        id: build
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          build-args: ${{ inputs.docker-build-args }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: ${{ inputs.dockerfile-path }}
          platforms: ${{ inputs.docker-arch }}
          pull: true
          no-cache: false
          cache-from: type=registry,ref=ghcr.io/${{ env.REPO_OWNER }}/cache:buildcache
          cache-to: type=registry,ref=ghcr.io/${{ env.REPO_OWNER }}/cache:buildcache,mode=max
          target: ${{ inputs.build-target }}
